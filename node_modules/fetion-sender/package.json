{
  "name": "fetion-sender",
  "version": "0.0.4",
  "description": "The fetion sender for node.js.",
  "main": "index.js",
  "dependencies": {
    "nodegrassex": "~0.0.2"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node tester.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/XadillaX/fetion-sender.git"
  },
  "keywords": [
    "fetion",
    "node.js"
  ],
  "author": {
    "name": "XadillaX"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/XadillaX/fetion-sender/issues"
  },
  "readme": "Node Fetion Sender\n==================\n\nThis node package allows you to send `fetion message` via node.js.\n\nGet it\n------------------\n\nYou just need to install this module via `npm`:\n\n    $ npm install fetion-sender\n\nOr download it from [here](https://github.com/XadillaX/fetion-sender/archive/master.zip) and put it to your `node_modules` directory.\n\nAnother way is to clone this repo via git to your `node_modules` directory.\n\nUsage\n------------------\n\n### Simple\n\nThe easiest way to send a message is just shown below:\n\n    var from = \"152********\";\n    var password = \"********\";\n    var to = \"152********\";\n    var msg = \"Hello world!\";\n    var fetion = require(\"fetion-sender\");\n    fetion.send(from, password, to, msg, function(status, msg) {\n        if(!status) {\n            console.log(msg);\n        } else {\n            console.log(\"Sent successfully!\");\n        }\n    });\n\nMake sure that the receiver is your fetion friend.\n\nIf you sent successfully, the `status` in callback function will be true and `msg` will be an empty string. Otherwise, `status` is false and `msg` contains the error message.\n\n### Extra\n\nIf you want control the process, you will use the **protocol helper**.\n\nProtocol Helper is a class of fetion sender. You can get a new protocol helper object by calling:\n\n    var helper = require(\"fetion-sender\").createSender();\n\nThere're several functions in that object.\n\n> **Tip:** The `callback` shown below are all in format of\n>\n>     function callback(status, msg);\n>\n> + `status` stands for the status of the function you're called. `true` means succeed and `false` means failed.\n> + `msg` stands for the result message. If `status` is `true`, this `msg` will be empty or some useful result such as **user ID** and so on. And if `status` is `false`, this parameter will be the error message.\n\n#### Login\n\nLogin function will be called like\n\n    helper.login(username, password, callback);\n\nBefore you do anything with this helper, make sure you're logged in.\n\n#### Send\n\nThis is the send function\n\n    helper.send(phonenumber, message, callback);\n\n#### Send to Friend *\n\nThis function is called by `send` function. But you can call it also.\n\n    helper.sendToFriend(userid, message, callback);\n\n> **Caution:** The first parameter is not `phonenumber` but `userid` which is returned by `getUserID` function.\n\n#### Send to Self *\n\nIf you're sending message to yourself (sender number is the receive number), you can't use `sendToFriend` function. This function is also called by `send` function.\n\n    helper.sendToSelf(message, callback);\n\n#### Get CSRF Token *\n\nA CSRF token is required while you're sending message to your friend. I think this token is something like a session id. Get a CSRF token with a friend means you've set up a session with him/her.\n\nThis function is called by `sendToFriend`.\n\n    helper.getCsrfToken(userid, callback);\n\n#### Get User ID *\n\nIf you want use `sendToFriend` function, you must have the user ID of your friend. This function is to get the user ID with phone number.\n\n    helper.getUserID(phonenumber, callback);\n",
  "readmeFilename": "README.md",
  "_id": "fetion-sender@0.0.4",
  "dist": {
    "shasum": "733b79308d046d491c6a86df603558340d5c745c"
  },
  "_from": "fetion-sender@",
  "_resolved": "https://registry.npmjs.org/fetion-sender/-/fetion-sender-0.0.4.tgz"
}
